 1 уровень сложности: Задача:
Создайте 5 потоков, которые выводят числа от 1 до 10.
Каждый поток должен использовать метод run() для вывода чисел.
Задача:
Создайте 3 потока, которые вычисляют и выводят квадраты чисел от 1 до 10.
Каждый поток должен использовать метод run() для вычисления и вывода квадратов.
Задача:
Создайте 2 потока, которые выводят все четные числа от 1 до 20 и все нечетные числа
от 1 до 20 соответственно. Каждый поток должен использовать метод run() для вывода чисел.
Задача:
Создайте 4 потока, которые выводят сообщение "Hello, World!" каждый с задержкой в 1 секунду. Каждый поток должен использовать метод run() для вывода сообщения.
Задача:
Создайте 3 потока, каждый из которых выводит свое имя 5 раз. Каждый поток должен использовать метод run() для вывода имени.
Задача:
Создайте класс Counter, который имеет внутреннее целочисленное поле count. Создайте два потока, каждый из которых увеличивает count на 1 миллион раз. Используйте синхронизированный блок, чтобы гарантировать корректное обновление значения count
Задача:
Создайте класс BankAccount, у которого есть баланс balance. Создайте два потока, один из которых пытается снять средства со счета, а другой пытается пополнить счет. Используйте синхронизированные блоки, чтобы гарантировать корректное обновление баланса.
Задача:
Создайте класс Printer, у которого есть метод print(String message), который должен выводить сообщение посимвольно с задержкой в 100 миллисекунд. Создайте два потока, каждый из которых вызывает метод print() с разными сообщениями. Используйте синхронизированный блок внутри метода print(), чтобы гарантировать последовательную печать символов сообщений.
Задача: not necessery
Создайте класс SharedResource, у которого есть целочисленное поле value. Создайте три потока, один из которых устанавливает значение value, а два других потока пытаются получить это значение. Используйте синхронизированный блок и метод wait() и notify() для синхронизации потоков.
Задача: not necessery
Создайте класс Task, у которого есть метод execute(), который выполняет задачу в течение некоторого времени. Создайте пул из пяти потоков и очередь задач. Каждый поток должен брать задачу из очереди и выполнять ее. Используйте синхронизированный блок и методы wait() и notify() для синхронизации доступа к очереди задач.

2 уровень сложности: